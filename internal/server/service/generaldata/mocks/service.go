// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/service/generaldata/service.go

// Package generaldata_mock is a generated GoMock package.
package generaldata_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/ilya372317/pass-keeper/internal/server/domain"
)

// MockdataStorage is a mock of dataStorage interface.
type MockdataStorage struct {
	ctrl     *gomock.Controller
	recorder *MockdataStorageMockRecorder
}

// MockdataStorageMockRecorder is the mock recorder for MockdataStorage.
type MockdataStorageMockRecorder struct {
	mock *MockdataStorage
}

// NewMockdataStorage creates a new mock instance.
func NewMockdataStorage(ctrl *gomock.Controller) *MockdataStorage {
	mock := &MockdataStorage{ctrl: ctrl}
	mock.recorder = &MockdataStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdataStorage) EXPECT() *MockdataStorageMockRecorder {
	return m.recorder
}

// GetAllEncrypted mocks base method.
func (m *MockdataStorage) GetAllEncrypted(ctx context.Context, userID uint) ([]domain.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEncrypted", ctx, userID)
	ret0, _ := ret[0].([]domain.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEncrypted indicates an expected call of GetAllEncrypted.
func (mr *MockdataStorageMockRecorder) GetAllEncrypted(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEncrypted", reflect.TypeOf((*MockdataStorage)(nil).GetAllEncrypted), ctx, userID)
}
