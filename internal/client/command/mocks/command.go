// Code generated by MockGen. DO NOT EDIT.
// Source: internal/client/command/command.go

// Package command_mock is a generated GoMock package.
package command_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/ilya372317/pass-keeper/internal/client/domain"
)

// MockpassKeeperService is a mock of passKeeperService interface.
type MockpassKeeperService struct {
	ctrl     *gomock.Controller
	recorder *MockpassKeeperServiceMockRecorder
}

// MockpassKeeperServiceMockRecorder is the mock recorder for MockpassKeeperService.
type MockpassKeeperServiceMockRecorder struct {
	mock *MockpassKeeperService
}

// NewMockpassKeeperService creates a new mock instance.
func NewMockpassKeeperService(ctrl *gomock.Controller) *MockpassKeeperService {
	mock := &MockpassKeeperService{ctrl: ctrl}
	mock.recorder = &MockpassKeeperServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpassKeeperService) EXPECT() *MockpassKeeperServiceMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockpassKeeperService) All(arg0 context.Context) ([]domain.ShortData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", arg0)
	ret0, _ := ret[0].([]domain.ShortData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockpassKeeperServiceMockRecorder) All(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockpassKeeperService)(nil).All), arg0)
}

// Login mocks base method.
func (m *MockpassKeeperService) Login(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockpassKeeperServiceMockRecorder) Login(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockpassKeeperService)(nil).Login), arg0, arg1, arg2)
}

// Register mocks base method.
func (m *MockpassKeeperService) Register(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockpassKeeperServiceMockRecorder) Register(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockpassKeeperService)(nil).Register), arg0, arg1, arg2)
}

// SaveCard mocks base method.
func (m *MockpassKeeperService) SaveCard(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCard", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCard indicates an expected call of SaveCard.
func (mr *MockpassKeeperServiceMockRecorder) SaveCard(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCard", reflect.TypeOf((*MockpassKeeperService)(nil).SaveCard), arg0, arg1, arg2, arg3, arg4)
}

// SaveLogin mocks base method.
func (m *MockpassKeeperService) SaveLogin(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLogin", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLogin indicates an expected call of SaveLogin.
func (mr *MockpassKeeperServiceMockRecorder) SaveLogin(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLogin", reflect.TypeOf((*MockpassKeeperService)(nil).SaveLogin), arg0, arg1, arg2, arg3)
}

// SaveText mocks base method.
func (m *MockpassKeeperService) SaveText(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveText", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveText indicates an expected call of SaveText.
func (mr *MockpassKeeperServiceMockRecorder) SaveText(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveText", reflect.TypeOf((*MockpassKeeperService)(nil).SaveText), arg0, arg1, arg2)
}
