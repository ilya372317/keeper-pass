// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: proto/pass.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PassService_Auth_FullMethodName             = "/PassService/Auth"
	PassService_Register_FullMethodName         = "/PassService/Register"
	PassService_DeleteData_FullMethodName       = "/PassService/DeleteData"
	PassService_IndexData_FullMethodName        = "/PassService/IndexData"
	PassService_SaveText_FullMethodName         = "/PassService/SaveText"
	PassService_UpdateText_FullMethodName       = "/PassService/UpdateText"
	PassService_ShowTextData_FullMethodName     = "/PassService/ShowTextData"
	PassService_SaveBinary_FullMethodName       = "/PassService/SaveBinary"
	PassService_UpdateBinary_FullMethodName     = "/PassService/UpdateBinary"
	PassService_ShowBinary_FullMethodName       = "/PassService/ShowBinary"
	PassService_SaveLoginPass_FullMethodName    = "/PassService/SaveLoginPass"
	PassService_UpdateLoginPass_FullMethodName  = "/PassService/UpdateLoginPass"
	PassService_ShowLoginPass_FullMethodName    = "/PassService/ShowLoginPass"
	PassService_SaveCreditCard_FullMethodName   = "/PassService/SaveCreditCard"
	PassService_UpdateCreditCard_FullMethodName = "/PassService/UpdateCreditCard"
	PassService_ShowCreditCard_FullMethodName   = "/PassService/ShowCreditCard"
)

// PassServiceClient is the client API for PassService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PassServiceClient interface {
	// Auth and register.
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Delete for all data types.
	DeleteData(ctx context.Context, in *DeleteDataRequest, opts ...grpc.CallOption) (*DeleteDataResponse, error)
	// Index all data types for user.
	IndexData(ctx context.Context, in *IndexDataRequest, opts ...grpc.CallOption) (*IndexDataResponse, error)
	// Operations for text data.
	SaveText(ctx context.Context, in *SaveTextRequest, opts ...grpc.CallOption) (*SaveTextResponse, error)
	UpdateText(ctx context.Context, in *UpdateTextRequest, opts ...grpc.CallOption) (*UpdateTextResponse, error)
	ShowTextData(ctx context.Context, in *ShowTextRequest, opts ...grpc.CallOption) (*ShowTextResponse, error)
	// Operations for binary data.
	SaveBinary(ctx context.Context, in *SaveBinaryRequest, opts ...grpc.CallOption) (*SaveBinaryResponse, error)
	UpdateBinary(ctx context.Context, in *UpdateBinaryRequest, opts ...grpc.CallOption) (*UpdateBinaryResponse, error)
	ShowBinary(ctx context.Context, in *ShowBinaryRequest, opts ...grpc.CallOption) (*ShowBinaryResponse, error)
	// Operations for login password type.
	SaveLoginPass(ctx context.Context, in *SaveLoginPassRequest, opts ...grpc.CallOption) (*SaveLoginPassResponse, error)
	UpdateLoginPass(ctx context.Context, in *UpdateLoginPassRequest, opts ...grpc.CallOption) (*UpdateLoginPassResponse, error)
	ShowLoginPass(ctx context.Context, in *ShowLoginPassRequest, opts ...grpc.CallOption) (*ShowLoginPassResponse, error)
	// Operations for credit card type.
	SaveCreditCard(ctx context.Context, in *SaveCreditCardRequest, opts ...grpc.CallOption) (*SaveCreditCardResponse, error)
	UpdateCreditCard(ctx context.Context, in *UpdateCreditCardRequest, opts ...grpc.CallOption) (*UpdateCreditCardResponse, error)
	ShowCreditCard(ctx context.Context, in *ShowCreditCardRequest, opts ...grpc.CallOption) (*ShowCreditCardResponse, error)
}

type passServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPassServiceClient(cc grpc.ClientConnInterface) PassServiceClient {
	return &passServiceClient{cc}
}

func (c *passServiceClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, PassService_Auth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, PassService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passServiceClient) DeleteData(ctx context.Context, in *DeleteDataRequest, opts ...grpc.CallOption) (*DeleteDataResponse, error) {
	out := new(DeleteDataResponse)
	err := c.cc.Invoke(ctx, PassService_DeleteData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passServiceClient) IndexData(ctx context.Context, in *IndexDataRequest, opts ...grpc.CallOption) (*IndexDataResponse, error) {
	out := new(IndexDataResponse)
	err := c.cc.Invoke(ctx, PassService_IndexData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passServiceClient) SaveText(ctx context.Context, in *SaveTextRequest, opts ...grpc.CallOption) (*SaveTextResponse, error) {
	out := new(SaveTextResponse)
	err := c.cc.Invoke(ctx, PassService_SaveText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passServiceClient) UpdateText(ctx context.Context, in *UpdateTextRequest, opts ...grpc.CallOption) (*UpdateTextResponse, error) {
	out := new(UpdateTextResponse)
	err := c.cc.Invoke(ctx, PassService_UpdateText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passServiceClient) ShowTextData(ctx context.Context, in *ShowTextRequest, opts ...grpc.CallOption) (*ShowTextResponse, error) {
	out := new(ShowTextResponse)
	err := c.cc.Invoke(ctx, PassService_ShowTextData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passServiceClient) SaveBinary(ctx context.Context, in *SaveBinaryRequest, opts ...grpc.CallOption) (*SaveBinaryResponse, error) {
	out := new(SaveBinaryResponse)
	err := c.cc.Invoke(ctx, PassService_SaveBinary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passServiceClient) UpdateBinary(ctx context.Context, in *UpdateBinaryRequest, opts ...grpc.CallOption) (*UpdateBinaryResponse, error) {
	out := new(UpdateBinaryResponse)
	err := c.cc.Invoke(ctx, PassService_UpdateBinary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passServiceClient) ShowBinary(ctx context.Context, in *ShowBinaryRequest, opts ...grpc.CallOption) (*ShowBinaryResponse, error) {
	out := new(ShowBinaryResponse)
	err := c.cc.Invoke(ctx, PassService_ShowBinary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passServiceClient) SaveLoginPass(ctx context.Context, in *SaveLoginPassRequest, opts ...grpc.CallOption) (*SaveLoginPassResponse, error) {
	out := new(SaveLoginPassResponse)
	err := c.cc.Invoke(ctx, PassService_SaveLoginPass_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passServiceClient) UpdateLoginPass(ctx context.Context, in *UpdateLoginPassRequest, opts ...grpc.CallOption) (*UpdateLoginPassResponse, error) {
	out := new(UpdateLoginPassResponse)
	err := c.cc.Invoke(ctx, PassService_UpdateLoginPass_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passServiceClient) ShowLoginPass(ctx context.Context, in *ShowLoginPassRequest, opts ...grpc.CallOption) (*ShowLoginPassResponse, error) {
	out := new(ShowLoginPassResponse)
	err := c.cc.Invoke(ctx, PassService_ShowLoginPass_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passServiceClient) SaveCreditCard(ctx context.Context, in *SaveCreditCardRequest, opts ...grpc.CallOption) (*SaveCreditCardResponse, error) {
	out := new(SaveCreditCardResponse)
	err := c.cc.Invoke(ctx, PassService_SaveCreditCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passServiceClient) UpdateCreditCard(ctx context.Context, in *UpdateCreditCardRequest, opts ...grpc.CallOption) (*UpdateCreditCardResponse, error) {
	out := new(UpdateCreditCardResponse)
	err := c.cc.Invoke(ctx, PassService_UpdateCreditCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passServiceClient) ShowCreditCard(ctx context.Context, in *ShowCreditCardRequest, opts ...grpc.CallOption) (*ShowCreditCardResponse, error) {
	out := new(ShowCreditCardResponse)
	err := c.cc.Invoke(ctx, PassService_ShowCreditCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PassServiceServer is the server API for PassService service.
// All implementations must embed UnimplementedPassServiceServer
// for forward compatibility
type PassServiceServer interface {
	// Auth and register.
	Auth(context.Context, *AuthRequest) (*AuthResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Delete for all data types.
	DeleteData(context.Context, *DeleteDataRequest) (*DeleteDataResponse, error)
	// Index all data types for user.
	IndexData(context.Context, *IndexDataRequest) (*IndexDataResponse, error)
	// Operations for text data.
	SaveText(context.Context, *SaveTextRequest) (*SaveTextResponse, error)
	UpdateText(context.Context, *UpdateTextRequest) (*UpdateTextResponse, error)
	ShowTextData(context.Context, *ShowTextRequest) (*ShowTextResponse, error)
	// Operations for binary data.
	SaveBinary(context.Context, *SaveBinaryRequest) (*SaveBinaryResponse, error)
	UpdateBinary(context.Context, *UpdateBinaryRequest) (*UpdateBinaryResponse, error)
	ShowBinary(context.Context, *ShowBinaryRequest) (*ShowBinaryResponse, error)
	// Operations for login password type.
	SaveLoginPass(context.Context, *SaveLoginPassRequest) (*SaveLoginPassResponse, error)
	UpdateLoginPass(context.Context, *UpdateLoginPassRequest) (*UpdateLoginPassResponse, error)
	ShowLoginPass(context.Context, *ShowLoginPassRequest) (*ShowLoginPassResponse, error)
	// Operations for credit card type.
	SaveCreditCard(context.Context, *SaveCreditCardRequest) (*SaveCreditCardResponse, error)
	UpdateCreditCard(context.Context, *UpdateCreditCardRequest) (*UpdateCreditCardResponse, error)
	ShowCreditCard(context.Context, *ShowCreditCardRequest) (*ShowCreditCardResponse, error)
	mustEmbedUnimplementedPassServiceServer()
}

// UnimplementedPassServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPassServiceServer struct {
}

func (UnimplementedPassServiceServer) Auth(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedPassServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedPassServiceServer) DeleteData(context.Context, *DeleteDataRequest) (*DeleteDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteData not implemented")
}
func (UnimplementedPassServiceServer) IndexData(context.Context, *IndexDataRequest) (*IndexDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexData not implemented")
}
func (UnimplementedPassServiceServer) SaveText(context.Context, *SaveTextRequest) (*SaveTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveText not implemented")
}
func (UnimplementedPassServiceServer) UpdateText(context.Context, *UpdateTextRequest) (*UpdateTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateText not implemented")
}
func (UnimplementedPassServiceServer) ShowTextData(context.Context, *ShowTextRequest) (*ShowTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowTextData not implemented")
}
func (UnimplementedPassServiceServer) SaveBinary(context.Context, *SaveBinaryRequest) (*SaveBinaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBinary not implemented")
}
func (UnimplementedPassServiceServer) UpdateBinary(context.Context, *UpdateBinaryRequest) (*UpdateBinaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBinary not implemented")
}
func (UnimplementedPassServiceServer) ShowBinary(context.Context, *ShowBinaryRequest) (*ShowBinaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowBinary not implemented")
}
func (UnimplementedPassServiceServer) SaveLoginPass(context.Context, *SaveLoginPassRequest) (*SaveLoginPassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLoginPass not implemented")
}
func (UnimplementedPassServiceServer) UpdateLoginPass(context.Context, *UpdateLoginPassRequest) (*UpdateLoginPassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLoginPass not implemented")
}
func (UnimplementedPassServiceServer) ShowLoginPass(context.Context, *ShowLoginPassRequest) (*ShowLoginPassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowLoginPass not implemented")
}
func (UnimplementedPassServiceServer) SaveCreditCard(context.Context, *SaveCreditCardRequest) (*SaveCreditCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCreditCard not implemented")
}
func (UnimplementedPassServiceServer) UpdateCreditCard(context.Context, *UpdateCreditCardRequest) (*UpdateCreditCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCreditCard not implemented")
}
func (UnimplementedPassServiceServer) ShowCreditCard(context.Context, *ShowCreditCardRequest) (*ShowCreditCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCreditCard not implemented")
}
func (UnimplementedPassServiceServer) mustEmbedUnimplementedPassServiceServer() {}

// UnsafePassServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PassServiceServer will
// result in compilation errors.
type UnsafePassServiceServer interface {
	mustEmbedUnimplementedPassServiceServer()
}

func RegisterPassServiceServer(s grpc.ServiceRegistrar, srv PassServiceServer) {
	s.RegisterService(&PassService_ServiceDesc, srv)
}

func _PassService_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServiceServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassService_Auth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServiceServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassService_DeleteData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServiceServer).DeleteData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassService_DeleteData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServiceServer).DeleteData(ctx, req.(*DeleteDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassService_IndexData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServiceServer).IndexData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassService_IndexData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServiceServer).IndexData(ctx, req.(*IndexDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassService_SaveText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServiceServer).SaveText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassService_SaveText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServiceServer).SaveText(ctx, req.(*SaveTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassService_UpdateText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServiceServer).UpdateText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassService_UpdateText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServiceServer).UpdateText(ctx, req.(*UpdateTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassService_ShowTextData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServiceServer).ShowTextData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassService_ShowTextData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServiceServer).ShowTextData(ctx, req.(*ShowTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassService_SaveBinary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveBinaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServiceServer).SaveBinary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassService_SaveBinary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServiceServer).SaveBinary(ctx, req.(*SaveBinaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassService_UpdateBinary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBinaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServiceServer).UpdateBinary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassService_UpdateBinary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServiceServer).UpdateBinary(ctx, req.(*UpdateBinaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassService_ShowBinary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowBinaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServiceServer).ShowBinary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassService_ShowBinary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServiceServer).ShowBinary(ctx, req.(*ShowBinaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassService_SaveLoginPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveLoginPassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServiceServer).SaveLoginPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassService_SaveLoginPass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServiceServer).SaveLoginPass(ctx, req.(*SaveLoginPassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassService_UpdateLoginPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLoginPassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServiceServer).UpdateLoginPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassService_UpdateLoginPass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServiceServer).UpdateLoginPass(ctx, req.(*UpdateLoginPassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassService_ShowLoginPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowLoginPassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServiceServer).ShowLoginPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassService_ShowLoginPass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServiceServer).ShowLoginPass(ctx, req.(*ShowLoginPassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassService_SaveCreditCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveCreditCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServiceServer).SaveCreditCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassService_SaveCreditCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServiceServer).SaveCreditCard(ctx, req.(*SaveCreditCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassService_UpdateCreditCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCreditCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServiceServer).UpdateCreditCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassService_UpdateCreditCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServiceServer).UpdateCreditCard(ctx, req.(*UpdateCreditCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassService_ShowCreditCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowCreditCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServiceServer).ShowCreditCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassService_ShowCreditCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServiceServer).ShowCreditCard(ctx, req.(*ShowCreditCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PassService_ServiceDesc is the grpc.ServiceDesc for PassService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PassService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PassService",
	HandlerType: (*PassServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _PassService_Auth_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _PassService_Register_Handler,
		},
		{
			MethodName: "DeleteData",
			Handler:    _PassService_DeleteData_Handler,
		},
		{
			MethodName: "IndexData",
			Handler:    _PassService_IndexData_Handler,
		},
		{
			MethodName: "SaveText",
			Handler:    _PassService_SaveText_Handler,
		},
		{
			MethodName: "UpdateText",
			Handler:    _PassService_UpdateText_Handler,
		},
		{
			MethodName: "ShowTextData",
			Handler:    _PassService_ShowTextData_Handler,
		},
		{
			MethodName: "SaveBinary",
			Handler:    _PassService_SaveBinary_Handler,
		},
		{
			MethodName: "UpdateBinary",
			Handler:    _PassService_UpdateBinary_Handler,
		},
		{
			MethodName: "ShowBinary",
			Handler:    _PassService_ShowBinary_Handler,
		},
		{
			MethodName: "SaveLoginPass",
			Handler:    _PassService_SaveLoginPass_Handler,
		},
		{
			MethodName: "UpdateLoginPass",
			Handler:    _PassService_UpdateLoginPass_Handler,
		},
		{
			MethodName: "ShowLoginPass",
			Handler:    _PassService_ShowLoginPass_Handler,
		},
		{
			MethodName: "SaveCreditCard",
			Handler:    _PassService_SaveCreditCard_Handler,
		},
		{
			MethodName: "UpdateCreditCard",
			Handler:    _PassService_UpdateCreditCard_Handler,
		},
		{
			MethodName: "ShowCreditCard",
			Handler:    _PassService_ShowCreditCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pass.proto",
}
